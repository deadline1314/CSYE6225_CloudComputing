package org.neu.ruotwang.courseservice1.lambda;

import org.neu.ruotwang.courseservice1.descriptor.AnnouncementDescriptor;

import com.amazonaws.regions.Regions;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.PublishRequest;

public class AnnouncementHandler implements RequestHandler<DynamodbEvent, String> {
	
	private AmazonSNS SNS_CLIENT = AmazonSNSClientBuilder.standard()
			.withRegion(Regions.US_WEST_2).build();
	// private static String COUESE_SNS_TOPIC = "arn:aws:sns:us-west-2:954846963373:Course_Announcement";

	/**
	 * 
	 * 1. user type in professorId
	 * ----Once an Anouncement object was created----
	 * 2. use professorId value to scan Professor Table, find the associated Professor object
	 * 3. use CourseId list to iterate all courseId, scan Course Table
	 * 4. for each Course object, find sns topic ARN, use that value to publish a topic
	 * 
	 * */
	@Override
	public String handleRequest(DynamodbEvent input, Context context) {
		for (DynamodbStreamRecord record : input.getRecords()) {
    		if (record == null || record.getEventName().equals("REMOVE")) {
    			continue;
    		}
    		
		}
		// TODO Auto-generated method stub
		return null;
	}
	
    private void sendEmailNotification(final String topicArn, final String message, final String subject) {
    	// Call Client.publishMessage
    	SNS_CLIENT.publish(new PublishRequest(topicArn, message, subject));
    }

}
