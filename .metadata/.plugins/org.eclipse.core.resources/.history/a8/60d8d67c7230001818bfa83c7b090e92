package org.neu.ruotwang.courseservice1.resource;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.neu.ruotwang.courseservice1.dao.Course;
import org.neu.ruotwang.courseservice1.dao.CourseDao;
import org.neu.ruotwang.courseservice1.descriptor.CourseDescriptor;
import org.neu.ruotwang.courseservice1.tempstorage.TempStorage;

@Path("/courses")
public class CourseResource {
	
	private static String SNS_TOPIC_PREFIX = "arn:aws:sns:us-west-2:954846963373:";
	// private TempStorage tempStorage = new TempStorage();
	private CourseDao courseDao = new CourseDao();
	
	/**
	 * Retrieve all courses records
	 * */
	@GET
	@Path("")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAllCourses() {
		return Response.ok(courseDao.getAll()).build();
	}
	
	/**
	 * Retrive a specific course record according to courseId
	 * */
	@GET
	@Path("{courseId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getCourse(@PathParam("courseId") String courseId) {
		return Response.ok(courseDao.get(courseId) == null ?
        		"No record was found." : courseDao.get(courseId)).build();
	}
	
	/**
	 * Create a new course record
	 * */
	@POST
	@Path("{courseId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public Response createCourse(@PathParam("courseId") String courseId,
			CourseDescriptor courseDescriptor) {
		if(courseDao.get(courseId).isPresent()) {
			return Response.ok(String.format("Course ID: s% already exists.", courseId)).build();
		}
		
		courseDao.save(mapFromCourseDescriptor(courseId, courseDescriptor));
		return Response.ok("Create new course succeed!").build();
	}
	
	private Course mapFromCourseDescriptor(String courseId, CourseDescriptor courseDescriptor) {
		Course newCourse = new Course();
		newCourse.setCourseId(courseId);
		newCourse.setCourseName(courseDescriptor.getCourseName());
		newCourse.s
		return newCourse;
	}
	
	/**
	 * Update an existing course record according to courseId
	 * */
	@PUT
	@Path("{courseId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public Response updateCourse(@PathParam("courseId") String courseId,
			CourseDescriptor courseDescriptor) {
		try {
			if(!tempStorage.getCOURSE_TABLE().containsKey(courseId)) {
				throw new RuntimeException(String.format("Course ID doesn't exist with ID: %s", courseId));
			}
			tempStorage.getCOURSE_TABLE().put(courseId, courseDescriptor);
			return Response.ok("Update course succeed!").build();
		} catch(RuntimeException ex) {
			throw new RuntimeException("Internal Server Error", ex);
		}
	}
	
	@DELETE
	@Path("{courseId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public Response deleteCourse(@PathParam("courseId") String courseId) {
		tempStorage.getCOURSE_TABLE().remove(courseId);
		return Response.ok("Delete course succeed!").build();
	}
}
